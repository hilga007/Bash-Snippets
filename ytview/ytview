#!/usr/bin/env bash

# Check if running on macOS with zsh
is_macos_zsh() {
  if [[ $(uname -s) == "Darwin" ]] && [[ $SHELL == */zsh ]]; then
    return 0
  else
    return 1
  fi
}

# Check if running on macOS
is_macos() {
  [[ $(uname -s) == "Darwin" ]]
}

# Check if running on zsh
is_zsh() {
  [[ $SHELL == */zsh ]]
}

# Remove cache directory if exists
cleanup_cache() {
  if [[ -d $HOME/.cache/ytview ]]; then
    rm -rf "$HOME"/.cache/ytview/
  fi
}

# Determine the configured HTTP client
get_configured_client() {
  if command -v curl &>/dev/null; then
    configuredClient="curl"
  elif command -v wget &>/dev/null; then
    configuredClient="wget"
  elif command -v http &>/dev/null; then
    configuredClient="httpie"
  elif command -v fetch &>/dev/null; then
    configuredClient="fetch"
  else
    echo "Error: This tool requires either curl, wget, httpie, or fetch to be installed." >&2
    exit 1
  fi
}

# Perform an HTTP GET request using the configured client
http_get() {
  case "$configuredClient" in
    curl)  curl -A curl -s "$@" ;;
    wget)  wget -qO- "$@" ;;
    httpie) http -b GET "$@" ;;
    fetch) fetch -q "$@" ;;
  esac
}

# Check internet connectivity
check_internet() {
  http_get github.com > /dev/null 2>&1 || { echo "Error: No active internet connection" >&2; exit 1; }
}

# Update the script
update_script() {
  # Update code goes here
  echo "Script updated successfully!"
}

# Get the configured video player
get_configured_player() {
  if [[ ! -z ${YTVIEWPLAYER+x} ]]; then
    player="$YTVIEWPLAYER"
    return 0
  fi

  if is_macos; then
    if [[ -f /Applications/VLC.app/Contents/MacOS/VLC ]]; then
      player="/Applications/VLC.app/Contents/MacOS/VLC"
    elif [[ -f $HOME/Applications/VLC.app/Contents/MacOS/VLC ]]; then
      player="$HOME/Applications/VLC.app/Contents/MacOS/VLC"
    elif [[ -f /Applications/mpv.app/Contents/MacOS/mpv ]]; then
      player="/Applications/mpv.app/Contents/MacOS/mpv"
    elif [[ -f $HOME/Applications/mpv.app/Contents/MacOS/mpv ]]; then
      player="$HOME/Applications/mpv.app/Contents/MacOS/mpv"
    else
      echo "Error: No supported video player installed (VLC or mpv)" >&2
      exit 1
    fi
  else
    if command -v vlc &>/dev/null; then
      player="vlc"
    elif command -v mpv &>/dev/null; then
      player="mpv"
    elif command -v mplayer &>/dev/null; then
      player="mplayer"
    else
      echo "Error: No supported video player installed (vlc, mpv, or mplayer)" >&2
      exit 1
    fi
  fi
}

# Display usage information
usage() {
  cat <<EOF
Ytview
Description: Search and play YouTube videos right from the terminal.
Usage: ytview [flag] [string] or ytview [videoToSearch]
  -s  Searches YouTube
  -c  Shows the latest videos of a channel
  -u  Update the script
  -h  Show the help
  -v  Get the tool version
Examples:
  ytview -s "Family Guy Chicken Fight"
  ytview -c Numberphile
EOF
}

if is_macos_zsh; then
  # Zsh-specific optimizations and functions
  zsh_optimized() {
    channelview() {
      mkdir -p "$HOME/.cache/ytview/channels/$channel" || return 1
      http_get "https://www.youtube.com/user/$channel/videos?hl=en" | awk '/Duration/ {print $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26,$27,$29}' | sed -E 's/aria-describedby="description-id.*//; s/title=//; s/"//g' | awk '{printf "%s.\t%s\n", NR, $0}' | sed 's/&#39;/'"'"'/g; s/&amp;/and/g; s/&quot;/"/g' > "$HOME/.cache/ytview/channels/$channel/titles.txt" || return 1
      http_get "https://www.youtube.com/user/$channel/Videos?hl=en" | awk '/watch?v=/ {print $6}' | sed 's/spf-link//; s/href=/https:\/\/www.youtube.com\//; s/"//g' | awk '{printf "%s.\t%s\n", NR, $0}' > "$HOME/.cache/ytview/channels/$channel/urls.txt" || return 1
      head -n 20 "$HOME/.cache/ytview/channels/$channel/titles.txt" || return 1
      read -p "Choose a video: " titlenumber
      if [[ -n ${titlenumber//[0-9]/} ]]; then
        echo "Canceled." >&2
        exit 0
      fi
      $player $(sed -n "$titlenumber"p < "$HOME/.cache/ytview/channels/$channel/urls.txt" | awk '{print $2}') > /dev/null 2>&1 &
    }

    searchview() {
      search=$(echo "$search" | tr " " +)
      mkdir -p "$HOME/.cache/ytview/searches/$search"
      http_get "https://www.youtube.com/results?hl=en&search_query=$search" | awk '/Duration/ && /watch?v=/ {print $13,$14,$15,$16,$17,$18,$19,$20,$21,$22,$23,$23}' | sed -E 's/aria-describedby="description-id.*//g; s/title=//; s/"//g; s/spf-link//; s/data-session-link=itct*.//; s/spf-prefetch//g' | awk '{printf "%s.\t%s\n", NR, $0}' | sed  s/'&#39;'/"'"/g | sed  s/'&amp;'/'and'/g | sed s/\&quot\;/\"/g > "$HOME/.cache/ytview/searches/$search/titles.txt" || return 1
      http_get "https://www.youtube.com/results?hl=en&search_query=$search" | awk '/watch?v=/ {print $5}' | sed 's/vve-check//; s/href=/https:\/\/www.youtube.com/; s/"//g; s/class="yt-uix-tile-link"//; /^\s*$/d' | awk '{printf "%s.\t%s\n", NR, $0}' > "$HOME/.cache/ytview/searches/$search/urls.txt" || return 1
      cat "$HOME/.cache/ytview/searches/$search/titles.txt" || return 1
      read -p "Choose a video: " titlenumber
      if [[ -n ${titlenumber//[0-9]/} ]]; then
        echo "Canceled." >&2
        exit 0
      fi
      $player $(sed -n "$titlenumber"p < "$HOME/.cache/ytview/searches/$search/urls.txt" | awk '{print $2}') > /dev/null 2>&1 &
    }

    # Execute zsh-specific functions
    if [[ $# == 0 ]]; then
      usage
      exit 0
    elif [[ $1 == "help" ]]; then
      usage
      exit 0
    elif [[ $1 == "update" ]]; then
      check_internet && update_script && exit 0
    elif [[ $flag == "search" ]]; then
      check_internet && get_configured_player && searchview || exit 1
    elif [[ $flag == "channel" ]]; then
      check_internet && get_configured_player && channelview || exit 1
    else
      check_internet && search=$(printf '%s ' "$@") && get_configured_player && searchview || exit 1
    fi
  }

  # Execute the optimized zsh-specific functions
  zsh_optimized "$@"

else
  # Bash-specific optimizations and functions
  bash_optimized() {
    channelview() {
      mkdir -p "$HOME/.cache/ytview/channels/$channel" || return 1
      http_get "https://www.youtube.com/user/$channel/videos?hl=en" | grep -Eo '"name":.*?[^\\]",' | head -20 | grep -Eo "[0-9.]+" > "$HOME/.cache/ytview/channels/$channel/titles.txt" || return 1
      http_get "https://www.youtube.com/user/$channel/Videos?hl=en" | grep -Eo '"name":.*?[^\\]",' | head -20 | grep -Eo "/watch\?v=.*?[^\\]\"" | grep -Eo "https://www.youtube.com[^\\]\"" > "$HOME/.cache/ytview/channels/$channel/urls.txt" || return 1
      cat "$HOME/.cache/ytview/channels/$channel/titles.txt" || return 1
      read -p "Choose a video: " titlenumber
      if [[ -n ${titlenumber//[0-9]/} ]]; then
        echo "Canceled." >&2
        exit 0
      fi
      $player $(sed -n "$titlenumber"p < "$HOME/.cache/ytview/channels/$channel/urls.txt" | awk '{print $2}') > /dev/null 2>&1 &
    }

    searchview() {
      search=$(echo "$search" | tr " " +)
      mkdir -p "$HOME/.cache/ytview/searches/$search"
      http_get "https://www.youtube.com/results?hl=en&search_query=$search" | grep -Eo '"name":.*?[^\\]",' | head -20 | grep -Eo "/watch\?v=.*?[^\\]\"" | grep -Eo "https://www.youtube.com[^\\]\"" > "$HOME/.cache/ytview/searches/$search/urls.txt" || return 1
      cat "$HOME/.cache/ytview/searches/$search/urls.txt" || return 1
      read -p "Choose a video: " titlenumber
      if [[ -n ${titlenumber//[0-9]/} ]]; then
        echo "Canceled." >&2
        exit 0
      fi
      $player $(sed -n "$titlenumber"p < "$HOME/.cache/ytview/searches/$search/urls.txt" | awk '{print $2}') > /dev/null 2>&1 &
    }

    # Execute bash-specific functions
    if [[ $# == 0 ]]; then
      usage
      exit 0
    elif [[ $1 == "help" ]]; then
      usage
      exit 0
    elif [[ $1 == "update" ]]; then
      check_internet && update_script && exit 0
    elif [[ $flag == "search" ]]; then
      check_internet && get_configured_player && searchview || exit 1
    elif [[ $flag == "channel" ]]; then
      check_internet && get_configured_player && channelview || exit 1
    else
      check_internet && search=$(printf '%s ' "$@") && get_configured_player && searchview || exit 1
    fi
  }

  # Execute the optimized bash-specific functions
  bash_optimized "$@"

fi
